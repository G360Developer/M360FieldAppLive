@page "/"
@using System.Net.Http.Json;
@using FieldAppHydro.Data;
@using Blazored.LocalStorage;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore;
@using System.Text;
@using System.Text.Json;
@using Newtonsoft.Json;


@inject StationDataService StationDataService
@inject PersonnelService PersonnelService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService _localStorage


<PageTitle>Home</PageTitle>

<h1>Welcome, Captain Anonymous</h1>

This application can retrieve and submit hydrogeology data to the MG360 server


@code {
    private bool isConnected;
    private string submissionData;

    protected override async Task OnInitializedAsync()
    {
        isConnected = await CheckConnectionAsync();
        submissionData = await _localStorage.GetItemAsync<string>("pendingData");
        await StartConnectionCheck();
    }

    private async Task<bool> CheckConnectionAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://www.google.com/");
            return response.IsSuccessStatusCode;
        }
        catch (Exception)
        {
            return false;
        }
    }

    private async Task StartConnectionCheck()
    {
        while (true)
        {
            isConnected = await CheckConnectionAsync();
            if (isConnected && !string.IsNullOrEmpty(submissionData))
            {
                await SubmitPendingData();
                await _localStorage.RemoveItemAsync("pendingData");
                submissionData = null; // Clear local variable as well
            }
            StateHasChanged();
            await Task.Delay(5000);
        }
    }

    private async Task SubmitPendingData()
{
    try
    {
        // Deserialize the pending data (assuming it's a string containing a StationData object)
        StationData dataObject;
        if (submissionData.StartsWith("["))  // Check for leading bracket (assuming single object)
        {
            // If wrapped in brackets, assume it's a list and extract the first object
            var dataList = JsonConvert.DeserializeObject<List<StationData>>(submissionData);
            dataObject = dataList[0];
        }
        else
        {
            // If no brackets, assume it's a single StationData object already
            dataObject = JsonConvert.DeserializeObject<StationData>(submissionData);
        }

        // Serialize the StationData object without brackets
        string jsonData = JsonConvert.SerializeObject(dataObject, Formatting.None);

        // Create content with the serialized data
        var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

        // Submit the data to the API
        var response = await Http.PostAsync("https://mg360fieldapplicationapi.azurewebsites.net/api/stationdata", content);

        if (response.IsSuccessStatusCode)
        {
            // Handle successful submission (e.g., show success message)
        }
        else
        {
            // Handle submission failure (e.g., log error, retry mechanism)
        }
    }
    catch (Exception ex)
    {
        // Handle exceptions during submission (e.g., log error)
    }
}
}